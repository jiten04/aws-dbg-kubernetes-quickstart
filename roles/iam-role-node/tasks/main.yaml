---

####################
# Create Amazon AWS IAM role DBG style - using cloud formation, prefixes etc. :-(
####################

# Generate / set the names

- set_fact:
   policy_file: "/tmp/node_policy.json"

- set_fact:
   trust_entity: "ec2.amazonaws.com"

- set_fact:
   policy_name: "{{ cluster_name }}-node"

- set_fact:
   iam_role_name: "{{ cluster_name }}-node"

- set_fact:
   cf_stack_name: "{{ cluster_name }}-node"

# Render templates

- name: Generate service
  template:
    src: policy.json.j2
    dest: "{{ policy_file }}"
    mode: 0744
  become: false

# Create policy, cloud formation stack and role

- name: Find if IAM policy exists
  shell: "aws iam list-policies --scope Local --output json | jq '.Policies[] | select(.PolicyName==\"{{ iam_prefix }}{{ policy_name }}\").Arn'"
  register: old_policy_arn

- name: Get IAM policy details
  shell: "aws iam get-policy --policy-arn {{ old_policy_arn.stdout }} --output json"
  register: get_old_policy
  when: old_policy_arn.stdout.find('arn:aws:iam::') != -1

- set_fact:
    old_policy: "{{ get_old_policy.stdout | from_json }}"
  when: old_policy_arn.stdout.find('arn:aws:iam::') != -1

- name: Delete IAM policy if it exists
  shell: "aws iam delete-policy --policy-arn {{ old_policy_arn.stdout }} --output json"
  when: old_policy_arn.stdout.find('arn:aws:iam::') != -1 and old_policy.Policy.AttachmentCount == 0

- fail:
    msg: "Policy with the same name already exists and is attached. This has to be fixed manually. @#!$%&"
  when: old_policy_arn.stdout.find('arn:aws:iam::') != -1 and old_policy.Policy.AttachmentCount > 0

- name: Create IAM policy
  shell: "aws iam create-policy --policy-name {{ iam_prefix }}{{ policy_name }} --policy-document file://{{ policy_file }} --output json"

- name: Create Cloud Formation
  shell: "aws cloudformation create-stack --stack-name {{ cf_stack_name }} --template-url {{ template_url }} --parameters ParameterKey=PolicyName,ParameterValue={{ iam_prefix }}{{ policy_name }} ParameterKey=RoleName,ParameterValue={{ iam_role_name }} ParameterKey=TrustEntity,ParameterValue={{ trust_entity }} --region {{ aws_region }} --output json"

- name: Check if Cloud Formation stack is complete
  shell: "aws cloudformation describe-stacks --stack-name {{ cf_stack_name }} --region {{ aws_region }} --output json | jq '.Stacks[0].StackStatus'"
  register: cmd_result
  until: cmd_result.stdout.find('CREATE_COMPLETE') != -1
  retries: 20
  delay: 30

- name: Delete Cloud Formation stack
  shell: "aws cloudformation delete-stack --stack-name {{ cf_stack_name }} --region {{ aws_region }} --output json"
