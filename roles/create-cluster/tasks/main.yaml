---

####################
# Create Kubernetes cluster
####################

# Render templates

- name: Generate CloudFormation template
  template:
    src: create-cluster.template.yaml.j2
    dest: "/tmp/create-cluster.template.yaml"
    mode: 0744
  become: false

# Create S3 bucket and upload the template

# Create a simple s3 bucket
- name: Create S3 bucket
  s3_bucket:
    name: "{{ cluster_name }}"
    state: present
    region: "{{ aws_region }}"
    versioning: no
    tags: "{{ tags }}"

- name: Upload the Cloudformation template to S3
  s3:
    bucket: "{{ cluster_name }}"
    src: /tmp/create-cluster.template.yaml
    object: create-cluster.template.yaml
    mode: put
    region: "{{ aws_region }}"

- set_fact:
   cf_template_url: "https://s3.{{ aws_region }}.amazonaws.com/{{ cluster_name }}/create-cluster.template.yaml"

# Upload SSH public key

- name: Upload the SSH public key
  ec2_key:
    name: "{{ cluster_name }}"
    key_material: "{{ item }}"
    region: "{{ aws_region }}"
  with_file: "{{ ssh_key }}"

# Get Lambda role Arn

- name: Get IAM policy details
  shell: "aws iam get-role --role-name {{ iam_prefix }}{{ cluster_name }}-lambda --output json"
  register: lambda_role

- set_fact:
    lambda_role_json: "{{ lambda_role.stdout | from_json }}"

# Create and execute Cloudformation stack

- name: Create Cloud Formation
  shell: "aws cloudformation create-stack --stack-name {{ cluster_name }} --template-url {{ cf_template_url }} --parameters ParameterKey=VPCID,ParameterValue={{ vpc_id }} ParameterKey=AvailabilityZone,ParameterValue={{ aws_zone }} ParameterKey=ClusterSubnetId,ParameterValue={{ subnet_id }} ParameterKey=LoadBalancerSubnetId,ParameterValue={{ subnet_id }} ParameterKey=LambdaIAMRole,ParameterValue={{ lambda_role_json.Role.Arn}} ParameterKey=MasterInstanceProfile,ParameterValue={{ iam_prefix }}{{ cluster_name }}-master ParameterKey=NodeInstanceProfile,ParameterValue={{ iam_prefix }}{{ cluster_name }}-node ParameterKey=SSHLocation,ParameterValue={{ ssh_cidr }} ParameterKey=ApiLbLocation,ParameterValue={{ api_cidr }} ParameterKey=KeyName,ParameterValue={{ cluster_name }} ParameterKey=InstanceType,ParameterValue={{ ec2_instance_type }} ParameterKey=DiskSizeGb,ParameterValue={{ ec2_disk_size }} ParameterKey=K8sNodeCapacity,ParameterValue={{ kubernetes_node_count }} ParameterKey=NetworkingProvider,ParameterValue={{ kubernetes_network }} ParameterKey=ClusterAssociation,ParameterValue={{ cluster_name }} --region {{ aws_region }} --output json"

- name: Check if Cloud Formation stack is complete
  shell: "aws cloudformation describe-stacks --stack-name {{ cluster_name }} --region {{ aws_region }} --output json | jq '.Stacks[0].StackStatus'"
  register: cmd_result
  until: cmd_result.stdout.find('CREATE_COMPLETE') != -1 or cmd_result.stdout.find('ROLLBACK_COMPLETE') != -1
  retries: 20
  delay: 30
